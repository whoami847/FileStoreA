#
# Copyright (C) 2025 by AnimeLord-Bots@Github, < https://github.com/AnimeLord-Bots >.
#
# This file is part of < https://github.com/AnimeLord-Bots/FileStore > project,
# and is released under the MIT License.
# Please see < https://github.com/AnimeLord-Bots/FileStore/blob/master/LICENSE >
#
# All rights reserved.

import asyncio
import os
import random
import sys
import time
from pyrogram import Client, filters, __version__
from pyrogram.enums import ParseMode, ChatAction, ChatMemberStatus, ChatType
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, ChatMemberUpdated, ChatPermissions
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant, InviteHashEmpty, ChatAdminRequired, PeerIdInvalid, UserIsBlocked, InputUserDeactivated, UserNotParticipant
from bot import Bot
from config import *
from helper_func import *
from database.database import *

@Bot.on_message(filters.command('fsub_mode') & filters.private & admin)
async def change_force_sub_mode(client: Client, message: Message):
    temp = await message.reply("<b><i>·¥°·¥Ä…™·¥õ ·¥Ä s·¥á·¥Ñ..</i></b>", quote=True)
    channels = await db.show_channels()

    if not channels:
        return await temp.edit("<b>‚ùå …¥·¥è “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á üs “ì·¥è·¥ú…¥·¥Ö.</b>")

    buttons = []
    for ch_id in channels:
        try:
            chat = await client.get_chat(ch_id)
            mode = await db.get_channel_mode(ch_id)
            status = "üü¢" if mode == "on" else "üî¥"
            title = f"{status} {chat.title}"
            buttons.append([InlineKeyboardButton(title, callback_data=f"rfs_ch_{ch_id}")])
        except:
            buttons.append([InlineKeyboardButton(f"‚ö†Ô∏è {ch_id} (·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á)", callback_data=f"rfs_ch_{ch_id}")])

    buttons.append([InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")])

    await temp.edit(
        "<b>‚ö° s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥õ·¥è…¢…¢ ü·¥á “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥ç·¥è·¥Ö·¥á:</b>",
        reply_markup=InlineKeyboardMarkup(buttons),
        disable_web_page_preview=True
    )

@Bot.on_chat_member_updated()
async def handle_Chatmembers(client, chat_member_updated: ChatMemberUpdated):    
    chat_id = chat_member_updated.chat.id

    if await db.reqChannel_exist(chat_id):
        old_member = chat_member_updated.old_chat_member

        if not old_member:
            return

        if old_member.status == ChatMemberStatus.MEMBER:
            user_id = old_member.user.id

            if await db.req_user_exist(chat_id, user_id):
                await db.del_req_user(chat_id, user_id)

@Bot.on_chat_join_request()
async def handle_join_request(client, chat_join_request):
    chat_id = chat_join_request.chat.id
    user_id = chat_join_request.from_user.id

    if await db.reqChannel_exist(chat_id):
        if not await db.req_user_exist(chat_id, user_id):
            await db.req_user(chat_id, user_id)

@Bot.on_message(filters.command('addchnl') & filters.private & admin)
async def add_force_sub(client: Client, message: Message):
    temp = await message.reply("<b><i>·¥°·¥Ä…™·¥õ ·¥Ä s·¥á·¥Ñ..</i></b>", quote=True)
    args = message.text.split(maxsplit=1)

    if len(args) != 2:
        buttons = [[InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")]]
        return await temp.edit(
            "<b>·¥úÍú±·¥Ä…¢·¥á:</b> <code>/addchnl -100XXXXXXXXXX</code>\n<b>·¥Ä·¥Ö·¥Ö ·¥è…¥ ü è ·¥è…¥·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä·¥õ ·¥Ä ·¥õ…™·¥ç·¥á.</b>",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    try:
        channel_id = int(args[1])
    except ValueError:
        return await temp.edit("<b>‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö!</b>")

    all_channels = await db.show_channels()
    channel_ids_only = [cid if isinstance(cid, int) else cid[0] for cid in all_channels]
    if channel_id in channel_ids_only:
        return await temp.edit(f"<b>·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥áx…™s·¥õs:</b> <code>{channel_id}</code>")

    try:
        # Attempt to get chat information
        chat = await client.get_chat(channel_id)
        if chat.type != ChatType.CHANNEL:
            return await temp.edit("<b>‚ùå ·¥è…¥ ü è ·¥ò·¥ú ô ü…™·¥Ñ ·¥è Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥Ä Ä·¥á ·¥Ä ü ü·¥è·¥°·¥á·¥Ö.</b>")

        # Check if bot is a member of the channel
        try:
            member = await client.get_chat_member(chat.id, "me")
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await temp.edit(
                    "<b>‚ùå  ô·¥è·¥õ ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.</b>\n"
                    "<i>·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ ·¥Äs ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</i>"
                )
        except UserNotParticipant:
            return await temp.edit(
                "<b>‚ùå  ô·¥è·¥õ …™s …¥·¥è·¥õ ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥è“ì ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.</b>\n"
                "<i>·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á …™·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.</i>"
            )

        # Generate invite link
        link = await client.export_chat_invite_link(chat.id) if not chat.username else f"https://t.me/{chat.username}"
        
        # Add channel to database
        await db.add_channel(channel_id)
        return await temp.edit(
            f"<b>‚úÖ “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä·¥Ö·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n"
            f"<b>…¥·¥Ä·¥ç·¥á:</b> <a href='{link}'>{chat.title}</a>\n"
            f"<b>…™·¥Ö:</b> <code>{channel_id}</code>",
            disable_web_page_preview=True
        )

    except PeerIdInvalid:
        return await temp.edit(
            f"<b>‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü:</b>\n<code>{channel_id}</code>\n\n"
            "<i>·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö …™s …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è Ä ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ö·¥è·¥ás …¥·¥è·¥õ ·¥áx…™s·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á …™·¥Ö ·¥Ä…¥·¥Ö ·¥á…¥s·¥ú Ä·¥á ·¥õ ú·¥á  ô·¥è·¥õ …™s ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä.</i>"
        )
    except ChatAdminRequired:
        return await temp.edit(
            f"<b>‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü:</b>\n<code>{channel_id}</code>\n\n"
            "<i>·¥õ ú·¥á  ô·¥è·¥õ  Ä·¥á«´·¥ú…™ Ä·¥ás ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü. ·¥ò ü·¥á·¥Äs·¥á ·¥ç·¥Ä·¥ã·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.</i>"
        )
    except Exception as e:
        return await temp.edit(
            f"<b>‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü:</b>\n<code>{channel_id}</code>\n\n"
            f"<i>·¥á Ä Ä·¥è Ä: {e}</i>"
        )

@Bot.on_message(filters.command('delchnl') & filters.private & admin)
async def del_force_sub(client: Client, message: Message):
    temp = await message.reply("<b><i>·¥°·¥Ä…™·¥õ ·¥Ä s·¥á·¥Ñ..</i></b>", quote=True)
    args = message.text.split(maxsplit=1)
    all_channels = await db.show_channels()

    if len(args) < 2:
        buttons = [[InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")]]
        return await temp.edit(
            "<b>·¥úÍú±·¥Ä…¢·¥á:</b> <code>/delchnl <channel_id | all</code>",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    if args[1].lower() == "all":
        if not all_channels:
            return await temp.edit("<b>‚ùå …¥·¥è “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á üs “ì·¥è·¥ú…¥·¥Ö.</b>")
        for ch_id in all_channels:
            await db.rem_channel(ch_id)
        return await temp.edit("<b>‚úÖ ·¥Ä ü ü “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á üs  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö.</b>")

    try:
        ch_id = int(args[1])
        if ch_id in all_channels:
            await db.rem_channel(ch_id)
            return await temp.edit(f"<b>‚úÖ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö:</b> <code>{ch_id}</code>")
        else:
            return await temp.edit(f"<b>‚ùå ·¥Ñ ú·¥Ä…¥…¥·¥á ü …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö:</b> <code>{ch_id}</code>")
    except ValueError:
        buttons = [[InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")]]
        return await temp.edit(
            "<b>·¥úÍú±·¥Ä…¢·¥á:</b> <code>/delchnl <channel_id | all</code>",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as e:
        return await temp.edit(f"<b>‚ùå ·¥á Ä Ä·¥è Ä:</b> <code>{e}</code>")

@Bot.on_message(filters.command('listchnl') & filters.private & admin)
async def list_force_sub_channels(client: Client, message: Message):
    temp = await message.reply("<b><i>·¥°·¥Ä…™·¥õ ·¥Ä s·¥á·¥Ñ..</i></b>", quote=True)
    channels = await db.show_channels()

    if not channels:
        return await temp.edit("<b>‚ùå …¥·¥è “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á üs “ì·¥è·¥ú…¥·¥Ö.</b>")

    result = "<b>‚ö° “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á üs:</b>\n\n"
    for ch_id in channels:
        try:
            chat = await client.get_chat(ch_id)
            link = await client.export_chat_invite_link(ch_id) if not chat.username else f"https://t.me/{chat.username}"
            result += f"<b>‚Ä¢</b> <a href='{link}'>{chat.title}</a> [<code>{ch_id}</code>]\n"
        except Exception:
            result += f"<b>‚Ä¢</b> <code>{ch_id}</code> ‚Äî <i>·¥ú…¥·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á</i>\n"

    buttons = [[InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")]]
    await temp.edit(
        result, 
        disable_web_page_preview=True, 
        reply_markup=InlineKeyboardMarkup(buttons)
    )

#
# Copyright (C) 2025 by AnimeLord-Bots@Github, < https://github.com/AnimeLord-Bots >.
#
# This file is part of < https://github.com/AnimeLord-Bots/FileStore > project,
# and is released under the MIT License.
# Please see < https://github.com/AnimeLord-Bots/FileStore/blob/master/LICENSE >
#
# All rights reserved.
#
