#
# Copyright (C) 2025 by AnimeLord-Bots@Github, < https://github.com/AnimeLord-Bots >.
#
# This file is part of < https://github.com/AnimeLord-Bots/FileStore > project,
# and is released under the MIT License.
# Please see < https://github.com/AnimeLord-Bots/FileStore/blob/master/LICENSE >
#
# All rights reserved.

import asyncio
import random
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from bot import Bot
from config import *
from database.database import db

# List of message effect IDs for random selection (Converted to integers)
MESSAGE_EFFECT_IDS = [
    5104841245755180586,  # üî•
    5107584321108051014,  # üëç
    5044134455711629726,  # ‚ù§Ô∏è
    5046509860389126442,  # üéâ
    5104858069142078462,  # üëé
    5046589136895476101,  # üí©
]

@Bot.on_callback_query(filters.regex(r"^(help|about|home|premium|close|rfs_ch_|rfs_toggle_|fsub_back|set_|remove_)"))
async def cb_handler(client: Bot, query: CallbackQuery):
    data = query.data
    user = query.from_user

    if data == "help":
        try:
            selected_image = random.choice(RANDOM_IMAGES)
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='home'),
                 InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data='close')]
            ])
            caption = HELP_TXT.format(
                first=user.first_name,
                last=user.last_name if user.last_name else "",
                username=None if not user.username else '@' + user.username,
                mention=user.mention,
                id=user.id
            )
            await query.message.edit_media(
                media=InputMediaPhoto(media=selected_image, caption=caption),
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"·¥á Ä Ä·¥è Ä …™…¥  ú·¥á ü·¥ò ·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã: {e}")
            await query.message.edit_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥áss·¥Ä…¢·¥á.")
        await query.answer()

    elif data == "about":
        try:
            selected_image = random.choice(RANDOM_IMAGES)
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='home'),
                 InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data='close')]
            ])
            caption = ABOUT_TXT.format(
                first=user.first_name,
                last=user.last_name if user.last_name else "",
                username=None if not user.username else '@' + user.username,
                mention=user.mention,
                id=user.id
            )
            await query.message.edit_media(
                media=InputMediaPhoto(media=selected_image, caption=caption),
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"·¥á Ä Ä·¥è Ä …™…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã: {e}")
            await query.message.edit_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥áss·¥Ä…¢·¥á.")
        await query.answer()

    elif data == "home":
        try:
            selected_image = random.choice(RANDOM_IMAGES)
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥ç·¥è Ä·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs", url="https://t.me/Anime_Lord_List")],
                [InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="about"), InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="help")]
            ])
            caption = START_MSG.format(
                first=user.first_name,
                last=user.last_name if user.last_name else "",
                username=None if not user.username else '@' + user.username,
                mention=user.mention,
                id=user.id
            )
            await query.message.edit_media(
                media=InputMediaPhoto(media=selected_image, caption=caption),
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"·¥á Ä Ä·¥è Ä …™…¥  ú·¥è·¥ç·¥á ·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã: {e}")
            await query.message.edit_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥õ·¥ú ú Ä…¥…™…¥…¢ ·¥õ·¥è  ú·¥è·¥ç·¥á.")
        await query.answer()

    elif data == "premium":
        await query.message.delete()
        await client.send_photo(
            chat_id=query.message.chat.id,
            photo=QR_PIC,
            caption=(
                f"üëã {query.from_user.username if query.from_user.username else 'user'}\n\n"
                f"üéñÔ∏è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥ò ü·¥Ä…¥s :\n\n"
                f"‚óè {PRICE1}  “ì·¥è Ä 0 ·¥Ö·¥Ä ès ·¥ò Ä…™·¥ç·¥á ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò\n\n"
                f"‚óè {PRICE2}  “ì·¥è Ä 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä…™·¥ç·¥á ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò\n\n"
                f"‚óè {PRICE3}  “ì·¥è Ä 3 ·¥ç·¥è…¥·¥õ ús ·¥ò Ä…™·¥Æ·¥ç·¥á ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò\n\n"
                f"‚óè {PRICE4}  “ì·¥è Ä 6 ·¥Æ·¥ç·¥è…¥·¥õ ús ·¥ò Ä…™·¥Æ·¥ç·¥á ·¥Æ·¥ç·¥á·¥Æ·¥ç ô·¥á Äs ú…™·¥ò\n\n"
                f"‚óè {PRICE5}  “ì·¥è Ä 1  è·¥á·¥Ä Ä ·¥ò Ä…™·¥Æ·¥ç·¥á ·¥Æ·¥ç·¥á·¥Æ·¥ç ô·¥á Äs ú…™·¥ò\n\n\n"
                f"üíµ ·¥Äs·¥ã ·¥ú·¥ò…™ …™·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Æ·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥ò·¥Ä è ·¥õ ú·¥á Ä·¥á -  <code>{UPI_ID}</code>\n\n\n"
                f"‚ôªÔ∏è ·¥ò·¥Ä è·¥Æ·¥ç·¥á…¥·¥õ  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ …™…¥s·¥õ·¥Ä…¥·¥õ ·¥Æ·¥ç·¥á·¥Æ·¥ç ô·¥á Äs ú…™·¥ò \n\n\n"
                f"‚ÄºÔ∏è ·¥Æ·¥ç·¥ús·¥õ s·¥á…¥·¥Ö s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥Ä“ì·¥õ·¥á Ä ·¥ò·¥Ä è·¥Æ·¥ç·¥á…¥·¥õ & …™“ì ·¥Ä…¥ è·¥è…¥·¥á ·¥°·¥Ä…¥·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥Æ·¥ç ·¥õ…™·¥Æ·¥ç·¥á ·¥Æ·¥ç·¥á·¥Æ·¥ç ô·¥á Äs ú…™·¥ò ·¥õ ú·¥á…¥ ·¥Äs·¥ã ·¥Ä·¥Ö·¥Æ·¥ç…™…¥"
            ),
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "·¥Ä·¥Ö·¥Æ·¥ç…™…¥ 24/7", url=(SCREENSHOT_URL)
                        )
                    ],
                    [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")],
                ]
            ),
            message_effect_id=random.choice(MESSAGE_EFFECT_IDS)
        )
        await query.answer()

    elif data == "close":
        try:
            # Delete the callback message and the original command message if it exists
            await query.message.delete()
            if query.message.reply_to_message:
                await query.message.reply_to_message.delete()
        except Exception as e:
            print(f"·¥á Ä Ä·¥è Ä …™…¥ ·¥Ñ ü·¥ès·¥á ·¥Ñ·¥Ä ü ≤ ü ô·¥Ä·¥Ñ·¥ã: {e}")
        await query.answer()

    elif data.startswith("rfs_ch_"):
        cid = int(data.split("_")[2])
        try:
            chat = await client.get_chat(cid)
            mode = await db.get_channel_mode(cid)
            status = "üü¢ ·¥è…¥" if mode == "on" else "üî¥ ·¥è“ì“ì"
            new_mode = "off" if mode == "on" else "on"
            buttons = [
                [InlineKeyboardButton(f" Ä·¥á«´ ·¥ç·¥è·¥Ö·¥á {'off' if mode == 'on' else 'on'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
            ]
            await query.message.edit_text(
                f"·¥Ñ ú·¥Ä…¥…¥·¥á ü: {chat.title}\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Æ·¥ç·¥è·¥Ö·¥á: {status}",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception:
            await query.answer("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥“ì·¥è", show_alert=True)

    elif data.startswith("rfs_toggle_"):
        cid, action = data.split("_")[2:]
        cid = int(cid)
        mode = "on" if action == "on" else "off"
        await db.set_channel_mode(cid, mode)
        await query.answer(f"“ì·¥è Ä·¥Ñ·¥á-s·¥ú ô s·¥á·¥õ ·¥õ·¥è {'on' if mode == 'on' else 'off'}")
        chat = await client.get_chat(cid)
        status = "üü¢ ·¥è…¥" if mode == "on" else "üî¥ ·¥è“ì“ì"
        new_mode = "off" if mode == "on" else "on"
        buttons = [
            [InlineKeyboardButton(f" Ä·¥á«´ ·¥Æ·¥ç·¥è·¥Ö·¥á {'off' if mode == 'on' else 'on'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
            [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
        ]
        await query.message.edit_text(
            f"·¥Ñ ú·¥Ä…¥…¥·¥á ü: {chat.title}\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Æ·¥ç·¥è·¥Ö·¥á: {status}",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "fsub_back":
        channels = await db.show_channels()
        buttons = []
        for cid in channels:
            try:
                chat = await client.get_chat(cid)
                mode = await db.get_channel_mode(cid)
                status = "üü¢" if mode == "on" else "üî¥"
                buttons.append([InlineKeyboardButton(f"{status} {chat.title}", callback_data=f"rfs_ch_{cid}")])
            except:
                continue
        await query.message.edit_text(
            "s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥õ·¥è…¢…¢ ü·¥á …™·¥õs “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥Æ·¥ç·¥è·¥Ö·¥á:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await query.answer()

    elif data.startswith("set_") and data.split("_")[1] in ["start", "force"]:
        type = data.split("_")[1]
        print(f"Set image callback triggered for type: {type}")
        await db.set_temp_state(query.message.chat.id, f"set_{type}")
        await query.message.reply_text(f"·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥Æ·¥ç·¥á ·¥õ ú·¥á {type} …™·¥Æ·¥ç·¥Ä…¢·¥á.")
        await query.answer()

    elif data.startswith("remove_"):
        type = data.split("_")[1]
        images = await db.get_images(type)
        if not images:
            await query.message.reply_text(f"·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á …¥·¥è {type} …™·¥Æ·¥ç·¥Ä…¢·¥ás s·¥á·¥õ.")
        else:
            nums = list(range(1, len(images) + 1))
            text = f"·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ {type} …™·¥Æ·¥ç·¥Ä…¢·¥ás: {', '.join(map(str, nums))}\n·¥õ·¥è  Ä·¥á·¥Æ·¥ç·¥è·¥†·¥á ·¥Ä s…™…¥…¢ ü·¥á …™·¥Æ·¥ç·¥Ä…¢·¥á, ·¥ús·¥á /rev_{type} <number>\n·¥õ·¥è  Ä·¥á·¥Æ·¥ç·¥è·¥†·¥á ·¥Ä ü ü, ·¥ús·¥á /rev_all_{type}"
            await query.message.reply_text(text)
        await query.answer()

#
# Copyright (C) 2025 by AnimeLord-Bots@Github, < https://github.com/AnimeLord-Bots >.
#
# This file is part of < https://github.com/AnimeLord-Bots/FileStore > project,
# and is released under the MIT License.
# Please see < https://github.com/AnimeLord-Bots/FileStore/blob/master/LICENSE >
#
# All rights reserved.
#
#
